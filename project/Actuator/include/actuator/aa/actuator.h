///////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.
///
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : actuator.h
/// SOFTWARE COMPONENT NAME           : Actuator
/// GENERATED DATE                    : 2024-11-14 15:25:13
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_ACTUATOR_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_ACTUATOR_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "actuator/aa/port/controldata.h"

#include "para/swc/port_pool.h"

#include "servo_mgr.hpp"
#include "led_mgr.hpp"

#include <iostream>

namespace actuator
{
namespace aa
{

class Actuator
{
public:
    /// @brief Constructor
    Actuator();

    /// @brief Destructor
    ~Actuator();

    /// @brief Initialize software component
    bool Initialize();

    /// @brief Start software component
    void Start();

    /// @brief Terminate software component
    void Terminate();

private:
    /// @brief Run software component
    void Run();

    void TaskReceiveCEventCyclic();

    void OnReceiveCEvent(const deepracer::service::controldata::proxy::events::CEvent::SampleType &sample);

    void ServoCalibration(const int cal_type, const int servo_min, const int servo_mid, const int servo_max, const int servo_polarity);

    void MotorCalibration(const int cal_type = 1, const int motor_min, const int motor_mid, const int motor_max, const int motor_polarity);

private:
    bool m_running;
    /// @brief Pool of port
    ::para::swc::PortPool m_workers;

    /// @brief Logger for software component
    ara::log::Logger &m_logger;

    /// @brief Instance of Port {Actuator.ControlData}
    std::shared_ptr<actuator::aa::port::ControlData> m_ControlData;

    std::unique_ptr<PWM::ServoMgr> servoMgr;
    std::unique_ptr<PWM::LedMgr> ledMgr;
};

} /// namespace aa
} /// namespace actuator

#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_ACTUATOR_AA_H