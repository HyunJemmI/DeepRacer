///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : calc.h
/// SOFTWARE COMPONENT NAME           : Calc
/// GENERATED DATE                    : 2024-11-14 15:25:13
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_CALC_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_CALC_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "calc/aa/port/controldata.h"
#include "calc/aa/port/rawdata.h"
 
#include "para/swc/port_pool.h"
 
#include <openvino/openvino.hpp>
#include <opencv2/opencv.hpp>
#include <iostream>

namespace calc
{
namespace aa
{

class Calc
{
public:
    /// @brief Constructor
    Calc();

    /// @brief Destructor
    ~Calc();

    /// @brief Initialize software component
    bool Initialize();

    /// @brief Start software component
    void Start();

    /// @brief Terminate software component
    void Terminate();

private:
    void Run(); // Run software component
    void TaskReceiveREventCyclic();
    void TaskReceiveNotifyRFieldCyclic();
    void OnReceiveREvent(const deepracer::service::rawdata::proxy::events::REvent::SampleType &sample);
    
    float mapsteering(float input_value);
    float mapThrottle(float input_value);

    std::vector<float> dataProcess(std::vector<uint8_t> input_vector);

private:
    bool m_running;          // Flag to indicate if the component is running

    ::para::swc::PortPool m_workers; // Pool of port workers
    ara::log::Logger &m_logger;      // Logger for logging messages

    std::shared_ptr<calc::aa::port::ControlData> m_ControlData; // ControlData port instance
    std::shared_ptr<calc::aa::port::RawData> m_RawData;         // RawData port instance


};
 
} /// namespace aa
} /// namespace calc
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_CALC_AA_H