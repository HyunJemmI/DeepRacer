///////////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.
///
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : calc.h
/// SOFTWARE COMPONENT NAME           : Calc
/// GENERATED DATE                    : 2024-11-01 13:31:52
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_CALC_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_CALC_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "calc/aa/port/controldata.h"
#include "calc/aa/port/rawdata.h"

#include "para/swc/port_pool.h"

#include <mutex>
#include <condition_variable>
#include <vector>
#include <memory>
#include <arpa/inet.h> // for socket communication
#include <sys/socket.h>
#include <opencv2/opencv.hpp> // for OpenCV
#include <cstdint>
#include <chrono>

namespace calc
{
    namespace aa
    {

        class Calc
        {
        public:
            /// @brief Constructor
            Calc();

            /// @brief Destructor
            ~Calc();

            /// @brief Initialize software component
            bool Initialize();

            /// @brief Start software component
            void Start();

            /// @brief Terminate software component
            void Terminate();

        private:
            /// @brief Run software component
            void Run();

            void Run(); // Run software component
            void TaskReceiveREventCyclic();
            void TaskReceiveNotifyRFieldCyclic();
            void OnReceiveREvent(const deepracer::service::rawdata::proxy::events::REvent::SampleType &sample);

            bool ReconnectToServer();                               // Reconnect to the server
            void SocketCommunication();                             // Handle socket communication
            void ProcessReceivedFloats(float value1, float value2); // Process received float values
            void CloseSocket();                                     // Close the socket

        private:
            bool m_running;          // Flag to indicate if the component is running
            int m_socket_fd;         // Socket file descriptor for communication
            bool m_newDataAvailable; // Flag to indicate new data availability

            std::mutex m_dataMutex;           // Mutex for thread synchronization
            std::condition_variable m_dataCV; // Condition variable for thread synchronization

            ::para::swc::PortPool m_workers; // Pool of port workers
            ara::log::Logger &m_logger;      // Logger for logging messages

            std::shared_ptr<calc::aa::port::ControlData> m_ControlData; // ControlData port instance
            std::shared_ptr<calc::aa::port::RawData> m_RawData;         // RawData port instance

            deepracer::service::rawdata::proxy::events::REvent::SampleType m_latestRawData; // Latest raw data received from the sensor
        };

    } /// namespace aa
} /// namespace calc

#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_CALC_AA_H