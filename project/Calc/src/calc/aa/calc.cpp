///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : calc.cpp
/// SOFTWARE COMPONENT NAME           : Calc
/// GENERATED DATE                    : 2024-11-14 15:25:13
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "calc/aa/calc.h"

#include <vector>
 
namespace calc
{
namespace aa
{
 
Calc::Calc()
    : m_logger(ara::log::CreateLogger("CALC", "SWC", ara::log::LogLevel::kVerbose))
    , m_workers(2)
    , m_running(false)
{
}
 
Calc::~Calc()
{
}
 
bool Calc::Initialize()
{
    m_logger.LogVerbose() << "Calc::Initialize";
    
    bool init{true};
    
    m_ControlData = std::make_shared<calc::aa::port::ControlData>();
    m_RawData = std::make_shared<calc::aa::port::RawData>();
    
    return init;
}
 
void Calc::Start()
{
    m_logger.LogVerbose() << "Calc::Start";
    
    m_ControlData->Start();
    m_RawData->Start();
    
    // run software component
    Run();
}
 
void Calc::Terminate()
{
    m_logger.LogVerbose() << "Calc::Terminate";
    
    m_running = false;

    m_ControlData->Terminate();
    m_RawData->Terminate();
}
 
void Calc::Run()
{
    m_logger.LogVerbose() << "Calc::Run";

    m_running = true;
    
    m_workers.Async([this] { m_ControlData->SendEventCEventCyclic(); });
    m_workers.Async([this] { TaskReceiveREventCyclic(); });
    
    m_workers.Wait();
}

// RawData 이벤트 수신 작업 함수
void Calc::TaskReceiveREventCyclic()
{
    m_RawData->SetReceiveEventREventHandler([this](const auto &sample)
    { 
        OnReceiveREvent(sample); 
    });
    m_RawData->ReceiveEventREventCyclic();
}

// RawData 이벤트 수신 처리 함수
void Calc::OnReceiveREvent(const deepracer::service::rawdata::proxy::events::REvent::SampleType &sample)
{
    std::vector<uint8_t> bufferCombined = sample;

    m_logger.LogInfo() << "Calc::OnReceiveREvent - buffer size = " << bufferCombined.size();

    ara::core::Array<float, 2> result = {1.0f , 2.0f};
    m_ControlData->WriteDataCEvent(result);
    m_logger.LogInfo() << "Calc::WriteDataCEvent( {" << result[0] << ", "<< result[1] << "} )";
}
 
} /// namespace aa
} /// namespace calc
