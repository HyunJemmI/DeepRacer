///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : deepracerfg.cpp
/// SOFTWARE COMPONENT NAME           : DeepRacerFG
/// GENERATED DATE                    : 2024-11-01 13:31:52
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sm/para/port/deepracerfg.h"
 
namespace ara
{
namespace sm
{
namespace deepracerfg
{
namespace skeleton
{
 
TriggerInOut_DeepRacerFGSkeletonImpl::TriggerInOut_DeepRacerFGSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : TriggerInOut_DeepRacerFGSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SM", "PORT", ara::log::LogLevel::kVerbose))
    , m_DeepRacerFGState{ara::sm::DeepRacerStateType::kOff}
{
    // create state client
    m_stateClient = std::make_unique<ara::exec::StateClient>(m_undefinedStateCallback);
    
    // regist get handler, Notifier
    auto notifier_get_handler = [this]() {
        return GetNotifier();
    };
    Notifier.RegisterGetHandler(notifier_get_handler);
    
    // regist set handler, Trigger
    auto trigger_set_handler = [this](const fields::Trigger::FieldType& value) {
        return SetTrigger(value);
    };
    Trigger.RegisterSetHandler(trigger_set_handler);
}
 
ara::core::Future<fields::Notifier::FieldType> TriggerInOut_DeepRacerFGSkeletonImpl::GetNotifier()
{
    m_logger.LogVerbose() << "DeepRacerFG::GetNotifier::Requested";
    
    ara::core::Promise<fields::Notifier::FieldType> promise;
    
    promise.set_value(m_DeepRacerFGState);
    return promise.get_future();
}
 
void TriggerInOut_DeepRacerFGSkeletonImpl::NotifyDeepRacerFG()
{
    auto notify = Notifier.Update(m_DeepRacerFGState);
    if (notify.HasValue())
    {
        m_logger.LogVerbose() << "DeepRacerFG::NotifyNotifier::Update";
    }
    else
    {
        m_logger.LogError() << "DeepRacerFG::NotifyNotifier::Update::" << notify.Error().Message();
    }
}
 
void TriggerInOut_DeepRacerFGSkeletonImpl::UpdateDeepRacerFG(const fields::Notifier::FieldType& value)
{
    m_DeepRacerFGState = value;
}
 
ara::core::Future<fields::Trigger::FieldType> TriggerInOut_DeepRacerFGSkeletonImpl::SetTrigger(const fields::Trigger::FieldType& value)
{
    m_logger.LogVerbose() << "DeepRacerFG::SetTrigger::Requested";
    
    ara::core::Promise<fields::Trigger::FieldType> promise;
    
    // try to set field value
    RequestTransitFunctionGroupState(value);
    
    promise.set_value(m_DeepRacerFGState);
    return promise.get_future();
}
 
void TriggerInOut_DeepRacerFGSkeletonImpl::RequestTransitFunctionGroupState(const fields::Trigger::FieldType& value)
{
    ara::core::StringView functionGroupIdentifier{};
    switch (value)
    {
        case ara::sm::DeepRacerStateType::kOff :
        {
            functionGroupIdentifier = "DeepRacerFG/Off";
            break;
        }
        case ara::sm::DeepRacerStateType::kDevice :
        {
            functionGroupIdentifier = "DeepRacerFG/Device";
            break;
        }
        case ara::sm::DeepRacerStateType::kSimulation :
        {
            functionGroupIdentifier = "DeepRacerFG/Simulation";
            break;
        }
        case ara::sm::DeepRacerStateType::kVerify :
        {
            functionGroupIdentifier = "DeepRacerFG/Verify";
            break;
        }
    }
    // initialize function group
    auto preFunctionGroup = ara::exec::FunctionGroup::Preconstruct("DeepRacerFG");
    ara::exec::FunctionGroup::CtorToken tokenFunctionGroup(preFunctionGroup.ValueOrThrow());
    ara::exec::FunctionGroup functionGroup(std::move(tokenFunctionGroup));
    
    // initialize function group state
    auto preFunctionGroupState = ara::exec::FunctionGroupState::Preconstruct(functionGroup, functionGroupIdentifier);
    ara::exec::FunctionGroupState::CtorToken tokenFunctionGroupState(preFunctionGroupState.ValueOrThrow());
    ara::exec::FunctionGroupState functionGroupState(std::move(tokenFunctionGroupState));
    
    // request set state to EM
    auto request = m_stateClient->SetState(functionGroupState);
    request.wait();
    auto response = request.GetResult();
    if (response.HasValue())
    {
        m_logger.LogVerbose() << "DeepRacerFG::RequestChangeFunctionGroupState::SetState";
        m_DeepRacerFGState = value;
    }
    else
    {
        m_logger.LogError() << "DeepRacerFG::RequestChangeFunctionGroupState::SetState::" << response.Error().Message();
    }
}
 
void TriggerInOut_DeepRacerFGSkeletonImpl::UndefinedStateHandler(ara::exec::FunctionGroup& /*functionGroup*/)
{
    // put your logic
}
 
} /// namespace skeleton
} /// namespace deepracerfg
} /// namespace sm
} /// namespace ara

namespace sm
{
namespace para
{
namespace port
{
 
DeepRacerFG::DeepRacerFG()
    : m_logger(ara::log::CreateLogger("SM", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
{
}
 
DeepRacerFG::~DeepRacerFG()
{
}
 
void DeepRacerFG::Start()
{
    m_logger.LogVerbose() << "DeepRacerFG::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"SM/PARA/DeepRacerFG"};
    m_interface = std::make_shared<ara::sm::deepracerfg::skeleton::TriggerInOut_DeepRacerFGSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "DeepRacerFG::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "DeepRacerFG::Start::OfferService::" << offer.Error().Message();
    }
}
 
void DeepRacerFG::Terminate()
{
    m_logger.LogVerbose() << "DeepRacerFG::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "DeepRacerFG::Terminate::StopOfferService";
}
 
void DeepRacerFG::WriteValueDeepRacerFG(const ara::sm::deepracerfg::skeleton::fields::Notifier::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->UpdateDeepRacerFG(value);
}
 
void DeepRacerFG::NotifyDeepRacerFGCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            m_interface->NotifyDeepRacerFG();
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void DeepRacerFG::NotifyDeepRacerFGTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->NotifyDeepRacerFG();
}
 
void DeepRacerFG::NotifyDeepRacerFGTriggered(const ara::sm::deepracerfg::skeleton::fields::Notifier::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->UpdateDeepRacerFG(value);
    m_interface->NotifyDeepRacerFG();
}

// 사용자 추가 함수.
// 이 클래스의 객체를 보유한 즉, SM SortwareComponent측에서 직접 DeepRacerFG FunctionGroup State를 변경 처리 하기 위해 호출하는 함수.
void DeepRacerFG::ChangeDeepRacerFGManual(const ara::sm::deepracerfg::skeleton::fields::Trigger::FieldType& value)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_interface->SetTrigger(value);
}
 
} /// namespace port
} /// namespace para
} /// namespace sm
 
/// EOF