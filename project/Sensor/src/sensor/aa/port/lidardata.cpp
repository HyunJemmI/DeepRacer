///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : lidardata.cpp
/// SOFTWARE COMPONENT NAME           : LidarData
/// GENERATED DATE                    : 2024-11-04 08:32:44
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "sensor/aa/port/lidardata.h"
 
namespace deepracer
{
namespace service
{
namespace lidar
{
namespace skeleton
{
 
SvLidarDataSkeletonImpl::SvLidarDataSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SvLidarDataSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("SENS", "PORT", ara::log::LogLevel::kVerbose))
{
}
 
} /// namespace skeleton
} /// namespace lidar
} /// namespace service
} /// namespace deepracer

namespace sensor
{
namespace aa
{
namespace port
{
 
LidarData::LidarData()
    : m_logger(ara::log::CreateLogger("SENS", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_LEventData{0.0f}
{
}
 
LidarData::~LidarData()
{
}
 
void LidarData::Start()
{
    m_logger.LogVerbose() << "LidarData::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"Sensor/AA/LidarData"};
    m_interface = std::make_shared<deepracer::service::lidar::skeleton::SvLidarDataSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "LidarData::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "LidarData::Start::OfferService::" << offer.Error().Message();
    }
}
 
void LidarData::Terminate()
{
    m_logger.LogVerbose() << "LidarData::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "LidarData::Terminate::StopOfferService";
}
 
void LidarData::WriteDataLEvent(const deepracer::service::lidar::skeleton::events::LEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_LEventData = data;
}
 
void LidarData::SendEventLEventCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            auto send = m_interface->LEvent.Send(m_LEventData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "LidarData::SendEventLEventCyclic::Send";
            }
            else
            {
                m_logger.LogError() << "LidarData::SendEventLEventCyclic::Send::" << send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void LidarData::SendEventLEventTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    auto send = m_interface->LEvent.Send(m_LEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "LidarData::SendEventLEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "LidarData::SendEventLEventTriggered::Send::" << send.Error().Message();
    }
}
 
void LidarData::SendEventLEventTriggered(const deepracer::service::lidar::skeleton::events::LEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_LEventData = data;
    auto send = m_interface->LEvent.Send(m_LEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "LidarData::SendEventLEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "LidarData::SendEventLEventTriggered::Send::" << send.Error().Message();
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace sensor
 
/// EOF